quarkus.http.port=9000

# Configuração do PostgreSQL
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5440/bookings-api

# Hibernate
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.database.generation=drop-and-create

quarkus.rest-client.vehicle-api.url=http://localhost:8080/api/v1
quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG

quarkus.rest-client.vehicle-api.providers=verso.caixa.exception.VehicleAPIErrorHandler

#-----------------------[OIDC]-----------------------------------------------------------------
quarkus.oidc.auth-server-url=http://localhost:8888/realms/travelerent
quarkus.oidc.tls.verification=none
quarkus.oidc.ssl.verification=none

#ID do cliente registrado no Keycloak.
quarkus.oidc.client-id=bookings-backend-service
#Segredo do cliente para autenticação com o Keycloak.
quarkus.oidc.credentials.secret=cuv0nz1enzpp8aTLruUOLthU6NEyU0vs

quarkus.keycloak.devservices.enabled=false

#Aceita qualquer emissor de token
quarkus.oidc.token.issuer=any

#Habilita descoberta automática dos metadados OIDC
quarkus.oidc.discovery-enabled=true

#Força autenticação em todas as requisições.
quarkus.http.auth.proactive=true

#Define que os papéis (roles) vêm do token de acesso.
quarkus.oidc.roles.source=accesstoken

#Aplica política de autenticação em todos os caminhos.
quarkus.http.auth.permission.default.paths=/*
#Requer que o usuário esteja autenticado.
quarkus.http.auth.permission.default.policy=authenticated

# Libera o endpoint de registro
quarkus.http.auth.permission.public.paths=/api/v1/register
quarkus.http.auth.permission.public.policy=permit

#URL base para o cliente REST que acessa a API do Keycloak.
keycloak-user-api/mp-rest/url=http://localhost:8888

quarkus.log.min-level=DEBUG

#Ativa logs detalhados para a categoria OIDC.
quarkus.log.category."io.quarkus.oidc".level=DEBUG

quarkus.rest-client.keycloak-token-client.url=http://localhost:8888

quarkus.log.category."org.jboss.resteasy.reactive.client".level=DEBUG

vehicle-api/mp-rest/url=http://localhost:8080
vehicle-api/mp-rest/scope=javax.inject.Singleton

%prod.kafka.bootstrap.servers=kafka:9092

#===========================================
#==================KAFKA====================
#===========================================

mp.messaging.outgoing.booking-in.connector=smallrye-kafka
mp.messaging.outgoing.booking-in.topic=activated-bookings

mp.messaging.outgoing.booking-out.connector=smallrye-kafka
mp.messaging.outgoing.booking-out.topic=finished-bookings

mp.messaging.outgoing.booking-cancel.connector=smallrye-kafka
mp.messaging.outgoing.booking-cancel.topic=canceled-bookings

mp.messaging.incoming.vehicle-status-changed.connector=smallrye-kafka
mp.messaging.incoming.vehicle-status-changed.topic=vehicle-status-changed

mp.messaging.incoming.vehicle-created.connector=smallrye-kafka
mp.messaging.incoming.vehicle-created.topic=vehicle-created

#===========================================
#==================TWILIO====================
#===========================================

twilio.account.sid=${TWILIO_ACCOUNT_SID}
twilio.auth.token=${TWILIO_AUTH_TOKEN}
twilio.from.number=${TWILIO_FROM_NUMBER}

#===========================================
#==================REDIS====================
#===========================================
quarkus.cache.redis.all-bookings.value-type=java.util.List