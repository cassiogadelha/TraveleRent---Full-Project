# Configuração do PostgreSQL
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/vehicles-api
quarkus.datasource.jdbc.max-size=16

# Hibernate
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.database.generation=drop-and-create

#-----------------------[OIDC]-----------------------------------------------------------------
quarkus.oidc.auth-server-url=https://localhost:8543/realms/travelerent

#ID do cliente registrado no Keycloak.
quarkus.oidc.client-id=backend-service
#Segredo do cliente para autenticação com o Keycloak.
quarkus.oidc.credentials.secret=0CSfjWlFuusccCAd4oSV3AiduukffS6t

quarkus.keycloak.devservices.enabled=false

#Aceita qualquer emissor de token
quarkus.oidc.token.issuer=any

#Habilita descoberta automática dos metadados OIDC
quarkus.oidc.discovery-enabled=true

#Força autenticação em todas as requisições.
quarkus.http.auth.proactive=true

#Define que os papéis (roles) vêm do token de acesso.
quarkus.oidc.roles.source=accesstoken

#Aplica política de autenticação em todos os caminhos.
quarkus.http.auth.permission.default.paths=/*
#Requer que o usuário esteja autenticado.
quarkus.http.auth.permission.default.policy=authenticated

# Libera o endpoint de registro
quarkus.http.auth.permission.public.paths=/api/v1/register
quarkus.http.auth.permission.public.policy=permit

#URL base para o cliente REST que acessa a API do Keycloak.
keycloak-user-api/mp-rest/url=https://localhost:8543

quarkus.log.min-level=DEBUG

#Ativa logs detalhados para a categoria OIDC.
quarkus.log.category."io.quarkus.oidc".level=DEBUG

quarkus.rest-client.keycloak-token-client.url=https://localhost:8543

# Quarkus based Keycloak distribution
quarkus.keycloak.admin-client.server-url=https://localhost:8543